OK, voici une implÃ©mentation complÃ¨te de lâ€™authentification avec Spring Security + JWT, tout en vÃ©rifiant les rÃ´les via LDAP. Cette solution :

âœ… Utilise LDAP pour vÃ©rifier si un utilisateur appartient Ã  un groupe
âœ… GÃ¨re lâ€™authentification avec JWT cÃ´tÃ© Spring Boot
âœ… Ne nÃ©cessite pas dâ€™interface graphique

ðŸ“Œ 1. Ajouter les dÃ©pendances Spring Boot

Ajoute ces dÃ©pendances dans ton pom.xml :

<dependencies>
    <!-- Spring Security -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Spring Boot Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring LDAP -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-ldap</artifactId>
    </dependency>

    <!-- JSON Web Token (JWT) -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.11.5</version>
    </dependency>

    <!-- Spring Boot Validation -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Lombok (facultatif, pour rÃ©duire le boilerplate) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
</dependencies>

ðŸ“Œ 2. Configuration de LDAP dans application.properties

spring.ldap.urls=ldap://localhost:389
spring.ldap.base=dc=example,dc=com
spring.ldap.username=cn=admin,dc=example,dc=com
spring.ldap.password=adminpassword

ðŸ”¹ Explication :
	â€¢	spring.ldap.urls â†’ Adresse de ton serveur LDAP
	â€¢	spring.ldap.base â†’ Base DN de ton annuaire
	â€¢	spring.ldap.username / spring.ldap.password â†’ Credentials pour se connecter Ã  LDAP

ðŸ“Œ 3. Service LDAP pour vÃ©rifier les rÃ´les des utilisateurs

import org.springframework.ldap.core.LdapTemplate;
import org.springframework.ldap.query.LdapQuery;
import org.springframework.ldap.query.LdapQueryBuilder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class LdapService {
    private final LdapTemplate ldapTemplate;

    public LdapService(LdapTemplate ldapTemplate) {
        this.ldapTemplate = ldapTemplate;
    }

    public boolean isUserInGroup(String username, String groupName) {
        LdapQuery query = LdapQueryBuilder.query()
                .base("ou=groups,dc=example,dc=com")
                .where("cn").is(groupName)
                .and("member").is("cn=" + username + ",ou=users,dc=example,dc=com");

        List<String> result = ldapTemplate.search(query, (attributes, name) -> name.toString());
        return !result.isEmpty();
    }
}

ðŸ”¹ Ce service vÃ©rifie si un utilisateur appartient Ã  un groupe LDAP.

ðŸ“Œ 4. GÃ©nÃ©ration et validation des tokens JWT

ðŸ”¹ Classe utilitaire JwtUtil.java

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private long expirationMs;

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expirationMs))
                .signWith(SignatureAlgorithm.HS256, secret)
                .compact();
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public boolean validateToken(String token, String username) {
        return (username.equals(extractUsername(token)) && !isTokenExpired(token));
    }

    private boolean isTokenExpired(String token) {
        return extractClaim(token, Claims::getExpiration).before(new Date());
    }

    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = Jwts.parser()
                .setSigningKey(secret)
                .parseClaimsJws(token)
                .getBody();
        return claimsResolver.apply(claims);
    }
}

ðŸ”¹ Ce code gÃ¨re la gÃ©nÃ©ration et la validation des JWT.

ðŸ“Œ 5. Filtre JWT pour intercepter les requÃªtes

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.GenericFilterBean;

import java.io.IOException;

@Component
public class JwtFilter extends GenericFilterBean {

    private final JwtUtil jwtUtil;

    public JwtFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String authorizationHeader = httpRequest.getHeader("Authorization");

        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            String token = authorizationHeader.substring(7);
            String username = jwtUtil.extractUsername(token);

            if (username != null && jwtUtil.validateToken(token, username)) {
                SecurityContextHolder.getContext().setAuthentication(
                        new UsernamePasswordAuthenticationToken(username, null, List.of())
                );
            }
        }
        chain.doFilter(request, response);
    }
}

ðŸ“Œ 6. Configuration de Spring Security

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final JwtFilter jwtFilter;

    public SecurityConfig(JwtFilter jwtFilter) {
        this.jwtFilter = jwtFilter;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/auth/login").permitAll()
                .requestMatchers("/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}

ðŸ“Œ 7. ContrÃ´leur dâ€™authentification

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class AuthController {

    private final LdapService ldapService;
    private final JwtUtil jwtUtil;

    public AuthController(LdapService ldapService, JwtUtil jwtUtil) {
        this.ldapService = ldapService;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping("/login")
    public String login(@RequestParam String username) {
        if (ldapService.isUserInGroup(username, "admin")) {
            return jwtUtil.generateToken(username);
        }
        return "AccÃ¨s refusÃ©";
    }
}

ðŸš€ Conclusion
	1.	LDAP vÃ©rifie si lâ€™utilisateur appartient Ã  un groupe
	2.	Si oui, un JWT est gÃ©nÃ©rÃ©
	3.	Les requÃªtes utilisent le JWT pour sâ€™authentifier

Besoin dâ€™ajustements ?