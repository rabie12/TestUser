Below is an updated version of the JWT utility class that adds custom claims (such as role and permission) to the token while using the non‐deprecated signWith method from JJWT 0.11.5. If you still see deprecation warnings, please ensure you’re using the correct version of the library.

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private long expirationMs;

    // Decode the Base64-encoded secret and create a secure signing key.
    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(secret);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    /**
     * Generates a JWT token with additional claims for role and permission.
     *
     * @param username   the username (subject)
     * @param role       the user's role
     * @param permission the user's permission(s) (can be a single permission or a comma-separated string, etc.)
     * @return a signed JWT token
     */
    public String generateToken(String username, String role, String permission) {
        return Jwts.builder()
                .setSubject(username)
                .claim("role", role)
                .claim("permission", permission)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expirationMs))
                .signWith(getSigningKey(), SignatureAlgorithm.HS512) // non-deprecated usage
                .compact();
    }
}

Notes
	•	Secret Key:
Make sure your jwt.secret property is a Base64-encoded string that is sufficiently long (at least 32 bytes for HS512). For example:

jwt.secret=YmFzZTY0RW5jb2RlZFNlY3JldEtleVRleHREYXRhMQ==
jwt.expiration=3600000  # 1 hour in milliseconds


	•	Custom Claims:
The code above adds the role and permission claims. You can add more claims by chaining additional .claim("key", value) calls.
	•	signWith Method:
The method .signWith(getSigningKey(), SignatureAlgorithm.HS512) is the correct, non-deprecated approach in JJWT 0.11.5. If your IDE still flags it, double-check that your project uses the correct JJWT version.

This implementation should now meet your requirements for generating a JWT token with additional claims using Java 21, Spring Boot (latest version), and JJWT 0.11.5.