Voici les √©tapes pour modifier la relation des r√¥les en ManyToOne et g√©n√©rer une migration Liquibase.

1Ô∏è‚É£ Modifier l‚Äôentit√© User

Remplace la relation @ManyToMany par @ManyToOne, ce qui signifie qu‚Äôun utilisateur ne peut avoir qu‚Äôun seul r√¥le.

@Entity
@Table(name = "user")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User implements UserDetails {
    @Id
    @UuidGenerator
    @Column(name = "id", updatable = false, nullable = false)
    private UUID id;

    @Column(unique = true, nullable = false)
    private String username;

    private String email;

    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
    private List<Passkey> passkeys = new ArrayList<>();

    private String password;

    @ManyToOne
    @JoinColumn(name = "user_role_id", nullable = false)
    private UserRole role; // üî• Un seul r√¥le par utilisateur

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(role); // üî• Retourne l'autorit√© li√©e au r√¥le
    }

    @Override
    public boolean isAccountNonExpired() { return true; }

    @Override
    public boolean isAccountNonLocked() { return true; }

    @Override
    public boolean isCredentialsNonExpired() { return true; }

    @Override
    public boolean isEnabled() { return true; }
}

2Ô∏è‚É£ Modifier l‚Äôentit√© UserRole

Ajoute l‚Äôimpl√©mentation de GrantedAuthority pour qu‚Äôelle soit reconnue par Spring Security.

@Entity
@Table(name = "user_role")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserRole implements GrantedAuthority {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String name; // Exemple : ROLE_ADMIN, ROLE_USER

    @Override
    public String getAuthority() {
        return name; // üî• Retourne le r√¥le sous forme d'autorit√© Spring Security
    }
}

3Ô∏è‚É£ G√©n√©rer la migration Liquibase

Ajoute ce fichier Liquibase dans resources/db/changelog/changes/modify_user_role_relation.xml :

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.3.xsd">

    <changeSet id="modify-user-role-relation" author="dev">
        <!-- Supprime la table interm√©diaire de ManyToMany -->
        <dropTable tableName="user__user_role"/>

        <!-- Ajoute la colonne user_role_id dans user -->
        <addColumn tableName="user">
            <column name="user_role_id" type="bigint"/>
        </addColumn>

        <!-- Ajoute une contrainte de cl√© √©trang√®re -->
        <addForeignKeyConstraint 
            baseTableName="user" 
            baseColumnNames="user_role_id"
            referencedTableName="user_role"
            referencedColumnNames="id"
            constraintName="fk_user_role"/>
    </changeSet>
</databaseChangeLog>

4Ô∏è‚É£ Ajout √† master.xml

Ajoute cette ligne dans resources/db/changelog/master.xml pour ex√©cuter la migration :

<include file="db/changelog/changes/modify_user_role_relation.xml"/>

5Ô∏è‚É£ Lancer la migration

Ex√©cute la commande :

mvn spring-boot:run

Liquibase appliquera la migration automatiquement. üöÄ

Tu es pr√™t ! Maintenant chaque utilisateur a un seul r√¥le, et la migration est automatis√©e avec Liquibase. üî•