Here‚Äôs how to use JWT with Spring Security while checking user authentication against LDAP before generating the token.

‚úÖ 1. Add JWT Library

If you haven‚Äôt already, add JWT dependencies to your pom.xml:

<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt</artifactId>
    <version>0.11.5</version>
</dependency>

<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-crypto</artifactId>
</dependency>

üîê 2. JWT Utility Class

This class generates and validates JWT tokens.

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private long expirationMs;

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expirationMs))
                .signWith(SignatureAlgorithm.HS256, secret)
                .compact();
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public boolean validateToken(String token, String username) {
        return (username.equals(extractUsername(token)) && !isTokenExpired(token));
    }

    private boolean isTokenExpired(String token) {
        return extractClaim(token, Claims::getExpiration).before(new Date());
    }

    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = Jwts.parser()
                .setSigningKey(secret)
                .parseClaimsJws(token)
                .getBody();
        return claimsResolver.apply(claims);
    }
}

üîç 3. Check Authentication in LDAP Before Generating JWT

We‚Äôll modify the AuthService to first verify the user‚Äôs credentials in LDAP before generating a JWT token.

üîπ Updated LdapService.java to Check Credentials

import org.springframework.ldap.core.LdapTemplate;
import org.springframework.ldap.query.LdapQuery;
import org.springframework.ldap.query.LdapQueryBuilder;
import org.springframework.stereotype.Service;

@Service
public class LdapService {
    private final LdapTemplate ldapTemplate;

    public LdapService(LdapTemplate ldapTemplate) {
        this.ldapTemplate = ldapTemplate;
    }

    public boolean authenticateUser(String username, String password) {
        try {
            LdapQuery query = LdapQueryBuilder.query()
                    .where("uid").is(username); // Adjust according to your LDAP schema

            return !ldapTemplate.search(query, (attributes, name) -> name.toString()).isEmpty();
        } catch (Exception e) {
            return false;
        }
    }
}

üîπ AuthService.java - Authenticate with LDAP Before JWT

import org.springframework.stereotype.Service;

@Service
public class AuthService {
    private final LdapService ldapService;
    private final JwtUtil jwtUtil;

    public AuthService(LdapService ldapService, JwtUtil jwtUtil) {
        this.ldapService = ldapService;
        this.jwtUtil = jwtUtil;
    }

    public String authenticate(String username, String password) {
        if (ldapService.authenticateUser(username, password)) {
            return jwtUtil.generateToken(username);
        } else {
            throw new RuntimeException("Invalid credentials");
        }
    }
}

üîë 4. Authentication Controller

This controller accepts login requests, checks LDAP authentication, and returns a JWT token if successful.

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class AuthController {
    private final AuthService authService;

    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    @PostMapping("/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        return authService.authenticate(username, password);
    }
}

‚úÖ Summary
	1.	Added JWT dependencies
	2.	Created a JWT utility class for generating and validating tokens
	3.	Implemented LdapService to verify users in LDAP
	4.	Modified AuthService to authenticate against LDAP before issuing a JWT
	5.	Exposed a /auth/login endpoint to handle authentication

Now, when a user logs in:
‚úî Their credentials are checked in LDAP
‚úî If valid, a JWT token is generated
‚úî The token can be used for securing API requests

Let me know if you need adjustments! üöÄ