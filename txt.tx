The error you are seeing (java.net.SocketException: Connection or outbound has closed) indicates a connection issue with the LDAP server, and it often happens when there are SSL/TLS issues or incorrect configurations.

Here are some possible solutions:

1. Use LDAPS (SSL/TLS) Correctly

Your LDAP server is accessed through the ldaps:// protocol, which indicates that the server is expected to use SSL/TLS for communication. However, you are trying to connect to port 389, which is typically used for non-SSL connections (LDAP), not 636 (LDAPS).

Make sure you’re using the correct port for the ldaps protocol (636):

LdapQuery query = LdapQueryBuilder.query()
                .base("DC=OLKYPAY,DC=LOCAL")  // You should specify the base DN as per your LDAP structure
                .where("cn").is("OlkyWallet_UAT_AppBO")
                .and("member").is("cn=" + username + ",OU=Groupe_Olky,DC=OLKYPAY,DC=LOCAL");

// Ensure the proper configuration for using LDAPS
LdapContextSource contextSource = new LdapContextSource();
contextSource.setUrl("ldaps://ORT-ADM-AD-02.olkypay.local:636");  // Use LDAPS with port 636
contextSource.setUserDn("olkywallet.bind");
contextSource.setPassword("your_password_here");
contextSource.afterPropertiesSet();  // Initialize context source

LdapTemplate ldapTemplate = new LdapTemplate(contextSource);

2. Ensure Correct Bind DN and Password

Make sure that your bind DN (olkywallet.bind) and its associated password are correct. If the credentials are incorrect or expired, the bind will fail. Double-check these credentials with the LDAP server.

contextSource.setUserDn("olkywallet.bind");
contextSource.setPassword("your_password_here");

3. Use TLS/SSL Configuration

If you’re working in a corporate or restricted network environment, sometimes additional SSL/TLS configurations may be required. You can set up SSL/TLS with the following configurations:
	•	Truststore: Ensure that the LDAP server’s certificate is trusted by the Java environment. You can add the server’s certificate to your JVM’s cacerts truststore or configure it programmatically if needed.

For example:

System.setProperty("javax.net.ssl.trustStore", "path/to/your/truststore");
System.setProperty("javax.net.ssl.trustStorePassword", "your_truststore_password");

4. Test with a Different LDAP Client

To isolate the issue, try connecting to your LDAP server using an external LDAP client tool (like Apache Directory Studio or LDP.exe on Windows) to ensure the server is accessible and your credentials work.

If you can successfully connect via another client, then the issue might be with how your Spring application is configured.

5. Check Firewall and Network Access

The issue might also stem from a network or firewall configuration blocking the connection to the LDAP server. Ensure that your application can reach ORT-ADM-AD-02.olkypay.local over port 636.

You can test the connection with telnet or nc:

telnet ORT-ADM-AD-02.olkypay.local 636

If this fails, there may be network/firewall issues preventing the connection.

6. Update Dependencies and Java Version

Make sure that you are using the correct versions of spring-ldap and related libraries for your environment. Sometimes, issues can arise due to incompatibilities between different versions of Java, Spring, and LDAP libraries.

Summary of Changes:
	1.	Ensure you’re using port 636 for LDAPS (SSL/TLS).
	2.	Double-check the bind DN and password.
	3.	Make sure the server’s SSL certificate is trusted (via truststore).
	4.	Test with a separate LDAP client.
	5.	Ensure your network/firewall configuration allows communication on port 636.

Let me know if you need further help with any of these steps!